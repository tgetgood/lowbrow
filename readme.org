#+TITLE: Bundle of Experiments

The name comes from the fact that I was going to play with writing a toy
browser. It has since gone in several very different directions.

./modules/DataStructures contains a rewrite of the persistent datastructures
— HAMTs and Hickey's vectors, mostly — from xprl, along with a transducers api
intended for use both with those and julia channels; the end goal being to have
a library to write functional UIs without the downsides of FRP (probably with
its own downsides). This ought to me moved to its own repo.

./src/graphics contains a jumble of high level Vulkan wrappers and
demos/examples to test them out. ./src/graphics/viking.jl &
src/graphics/particles.jl run examples from vulkan-tutorial.com, whereas
src/graphics/mandlebrot.jl runs an example of an interactive demo (using GLFW).

src/browser is < 1% of a working browser. It can fetch HTML and dump it to a
terminal. That's about it.
* Fail notes
** [2023-12-19 Tue]
   Just spent 20 minutes debugging a null pointer error through mandlebrot,
   graphics, and hardware.

   The core issue was that vk couldn't create a device because I wanted a
   feature that wasn't available on the hardware. That did not — and does not —
   cause any error. In fact, none of the checks in hardware.checkdevice trigger
   any sort of error, they just return null.

   The null also propagated up through pdevice and caused the npe in
   createdevice when it tried to read out the queues.

   Possible solution: have `checkdevice` take a map of tests and return a map of
   results. Then, when a device is rejected, we have a clear reason why.
** [2023-12-19 Tue 22:47]
   Bug involving descriptorsets not being set properly comes down to a magic
   line of code where I merge config with one of its submaps.

   Why? I have no idea. I suspect this is a half finished refactor.
* To Do List
** Switch to Synchronization2
** wrap images to make transitions easier
   Vulkan doesn't rememeber anything for you, which makes life unduly difficult.
** find some way to order queue submissions
   Manually juggling semaphores is error prone and just feels wrong. What we
   need is a way to establish finish-before-start relations, topologically sort
   those, and then automate the barriers/semaphores/fences
** fix resizing bug
   "bug" being segfault when shrinking windows.
