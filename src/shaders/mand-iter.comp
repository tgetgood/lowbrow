#version 460
#extension GL_EXT_scalar_block_layout : enable

struct Pixel {
  uint done;
  uint count;
  vec2 mu;
  vec2 z;
};

layout(push_constant) uniform constants {
  uvec2 window;
  uint itercount;
} pcs;
     
layout(std430, binding = 0) readonly restrict buffer PixelSSBOIn {
   Pixel pixelsIn[ ];
};

layout(std430, binding = 1) writeonly restrict buffer PixelSSBOOut {
   Pixel pixelsOut[ ];
};

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// Escape boundary (squared)
const float threshold = 4.0;

void main() {
  
  uint i = gl_GlobalInvocationID.x;
  uint j = gl_GlobalInvocationID.y;
  uint n = j * pcs.window[0] + i;
  uint N = pcs.window[0] * pcs.window[1];

  if (n < N) {
    Pixel p = pixelsIn[n];

    uint done = p.done;

    if (done == 0) {
      uint count = p.count;
      vec2 z = p.z;
      const vec2 mu = p.mu;

      for (int c = 0; c < pcs.itercount; c++) {
        float zrs = z[0]*z[0];
        float zis = z[1]*z[1];
        // This done check lags one step behind the computation.
        if (zrs + zis < threshold) {
          done = 1;
          break;
        }
        z = vec2(zrs - zis - mu[0], 2.0*z[0]*z[1] - mu[1]);
        count++;
      }

      pixelsOut[n] = Pixel(done, count, mu, z);
    }
  }
} 
