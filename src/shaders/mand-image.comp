#version 450

struct Pixel {
  uint done;
  int count;
  vec2 mu;
  vec2 z;
};

layout(push_constant) uniform constants {
  uvec2 window;
  int itercount;
} pcs;

layout(std140, binding = 0) readonly restrict buffer PixelSSBOIn {
   Pixel pixels[ ];
};

layout(binding = 1) uniform writeonly restrict image2D image;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

vec4 colour(Pixel p, int iters) {
  return vec4(1.0, 0.0, 0.0, 1.0);
}

void main() {
  uint i = gl_GlobalInvocationID.x;
  uint j = gl_GlobalInvocationID.y;
  uint n = j * pcs.window[0] + i;
  uint N = pcs.window[0] * pcs.window[1];

  if (n < N) {
    Pixel p = pixels[n];
    
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), colour(p, pcs.itercount));
  }
}
