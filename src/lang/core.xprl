(def wrap
  "\n  Wraps a μ or primitive that takes only literal values in a function that
  evals its arguments.\n"
  (μ f
     ~(μ args
         ~(~f . ~~args))))

(def fn
  (μ [params body]
     ~(μ args
         ~((μ ~params ~~body) . ~~args))))

(def nth (wrap . nth*))

(def + (wrap . +*))
(def - (wrap . -*))
(def * (wrap . **))
(def / (wrap . /*))

(def > (wrap . >*))
(def < (wrap . <*))
(def = (wrap . =*))

;; Below, `select` is non-branching like the ?: or ifelse ternary operators,
;; except that it doesn't evaluate any of its arguments and the first must be a
;; literal boolean. The name is taken from the llvm instruction.

(def if
  (μ [pred t f]
     ~~(select ~~pred ~t ~f)))

(def when
  (μ [pred then]
     ~(if ~pred ~then (emit))))

(def inc (fn [x] (+ x 1)))

(def map (fn [f] (fn [x] (f x))))

(def filter (fn [p] (fn [x] (when (p x) x))))
